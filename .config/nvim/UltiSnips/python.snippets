snippet p "A simple print command"
print("======================================================")
print(${0})
print("======================================================")
endsnippet

# snippet print
# options word
#   print(${0})
#
# snippet prints
# options word
#   print("${0}")
#
# snippet     class
# abbr        class Class(...): ...
# options     head
# 	class ${1:#:name}(${2:object}):
#
# 		def __init__(self, ${3}):
# 			${0:pass}
#
# snippet     classd
# abbr        class Class(...): "..."
# options     head
# 	class ${1:#:name}(${2:object}):
# 		"""${3:#:class documentation}"""
#
# 		def __init__(self, ${4}):
# 			"""${5:#:__init__ documentation}"""
# 			${0:pass}
#
#
# snippet     TestSample
# abbr        class TestCase(...): ...
# options     head
# 	from django.test import TestCase, Client
# 	from rest_framework import status
# 	from rest_framework.test import APITestCase
#
#
# 	class TestCase${0:#:Name}(APITestCase):
#     fixtures = ["path/demo.json"]
#
# 		def setUp(self):
# 			self.client = Client()
#
# 		def test_sample(self):
# 			# Issue
# 			body = {"key": "value"}
# 			response = self.client.post("/api/v1/path", body)
# 			# Check status code
# 			self.assertEqual(response.status_code, status.HTTP_200_OK)
# 			# Check assert
# 			self.assertEqual("demo", response.json())
#
# snippet     Test
# abbr        class TestCase(...): ...
# options     head
# 	class TestCase${1:#:Name}(APITestCase):
#     fixtures = ["${0:path/demo.json}"]
#
# 		def setUp(self):
# 			self.client = Client()
#
# snippet     test
# abbr        def test_case(...): ...
# options     head
# 	def test_${1:#:name_case}(self):
#     # Issue
# 		${5:body = \{"key": "value"\}}
# 		response = self.client.${2:get}("${3:/api/v1/path}"${4:, body})
# 		# Check status code
# 		self.assertEqual(response.status_code, status.${6:HTTP_200_OK})
# 		# Check assert
# 		self.assertEqual("${0:sample}", response.json())
#
# snippet at
# options word
#     {{ '${1}' | translate }}${0}
